devtools::load_all()
# example_reads_star = read_tsv('/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer/inst/extdata/test_Chimeric.out.junction')
# example_gene_counts = read_tsv('/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer/inst/extdata/test_geneCounts.tab')
# example_gene_anno = rtracklayer::import.gff('/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer/inst/extdata/test_chr22Anno.gtf')
# example_splice_junc = rtracklayer::import.bed('/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer/inst/extdata/test_chr22SpliceJunctions.bed')
# save(example_reads_star,example_gene_counts,example_gene_anno,example_splice_junc,file ='/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer/inst/extdata/example_data.rda')
# library(tidyverse)
# library(digest)
# library(InteractionSet)
# library(scales)
set.seed(123)
res <- run_duplexdisco(
df = example_reads_star,
junctions_gr = example_splice_junc,
anno_gr = example_gene_anno,
df_counts = example_gene_counts,
sample_name = "test clustering",
fafile = NULL,
lib_type = "SE",
table_type = "STAR"
)
data(example_data)
res <- run_duplexdisco(
df = example_reads_star,
junctions_gr = example_splice_junc,
anno_gr = example_gene_anno,
df_counts = example_gene_counts,
sample_name = "test clustering",
fafile = NULL,
lib_type = "SE",
table_type = "STAR"
)
gi_clusters <- res$gi_clusters
gi_clusters
gi_reads <- res$gi_reads
df_reads <- res$df_reads
dim(df_reads)
dim(example_reads_star)
df_reads
gi_reads <- res$gi_reads
gi_reads
gi_reads
n_reads_passed_to_clustering_nodg <- df_reads %>%
dplyr::filter(is.na(cluster_id), map_type == "2arm") %>%
nrow()
n_reads_passed_to_clustering_nodg
n_reads_clustered <- sum(gi_clusters$n_reads)
n_reads_clustered
n_reads_clustered + n_reads_passed_to_clustering_nodg
n_reads_passed_to_clustering
n_reads_passed_to_clustering <- df_reads %>%
dplyr::filter(map_type == "2arm") %>%
nrow()
n_reads_passed_to_clustering
df_reads %>%
dplyr::filter(map_type == "2arm")
df_reads %>%
dplyr::filter(map_type == "2arm") %>% distinct(readname) %>% nrow()
n_reads_passed_to_clustering
n_reads_passed_to_clustering = 2040
n_reads_clustered
n_reads_passed_to_clustering_nodg
n_reads_passed_to_clustering
n_reads_initial
n_reads_initial <- nrow(example_reads_star)
n_reads_clustered <- sum(gi_clusters$n_reads)
n_reads_unclustered <- df_reads %>%
dplyr::filter(is.na(cluster_id)) %>%
nrow()
n_reads_passed_to_clustering <- df_reads %>%
dplyr::filter(map_type == "2arm") %>%
nrow()
n_reads_passed_to_clustering_nodg <- df_reads %>%
dplyr::filter(is.na(cluster_id), map_type == "2arm") %>%
nrow()
n_clusters <- length(gi_clusters)
expect_equal(n_reads_clustered + n_reads_unclustered, n_reads_initial, label = "no reads lost overall")
n_reads_unclustered
n_reads_clustered
n_reads_clustered
n_reads_unclustered
n_reads_initial
sum(gi_clusters$n_reads)
expect_equal(n_reads_clustered, 246, label = "correct number of reads clustered")
length(gi_clusters)
gi_clusters
source("/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer/R/duplex_functions.R")
res <- run_duplexdisco(
df = example_reads_star,
junctions_gr = example_splice_junc,
anno_gr = example_gene_anno,
df_counts = example_gene_counts,
sample_name = "test clustering",
fafile = NULL,
lib_type = "SE",
table_type = "STAR"
)
graph_vertices
graphdf
ddd = graphdf
View(ddd)
gi
gi$cluster_id = NULL
if (is.null(graphdf)){
message('Computing overlaps on-the-fly')
gi$idx_tmp = c(1:length(gi))
id_column = 'idx_tmp'
graphdf = compute_pair_overlap_df(gi,id_column = id_column,maxgap=maxgap,
minovl = minovl)
id_columns_grapdf = paste(id_column,c(1,2),sep = '.')
weight_column = 'weight'
graphdf = graphdf %>% dplyr::filter(
ratio.A >= min_arm_ratio,
ratio.B >= min_arm_ratio)
}else{
#message("Climeric duplex id column: ",id_column)
#message("Using connections dataframe with indexes: ",id_columns_grapdf[1],"-",id_columns_grapdf[2])
#message("Weights in: ",weight_column)
if (!(id_column %in% colnames(mcols(gi)))) {
stop(id_column ,"not found in provided GenomicInteractions onject")
}
}
id_column
gi
is.null(graphdf)
!(id_column %in% colnames(mcols(gi)))
graphdf=NULL
source("/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer/R/duplex_functions.R")
# example_reads_star = read_tsv('/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer/inst/extdata/test_Chimeric.out.junction')
# example_gene_counts = read_tsv('/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer/inst/extdata/test_geneCounts.tab')
# example_gene_anno = rtracklayer::import.gff('/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer/inst/extdata/test_chr22Anno.gtf')
# example_splice_junc = rtracklayer::import.bed('/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer/inst/extdata/test_chr22SpliceJunctions.bed')
# save(example_reads_star,example_gene_counts,example_gene_anno,example_splice_junc,file ='/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer/inst/extdata/example_data.rda')
# library(tidyverse)
# library(digest)
# library(InteractionSet)
# library(scales)
set.seed(123)
res <- run_duplexdisco(
df = example_reads_star,
junctions_gr = example_splice_junc,
anno_gr = example_gene_anno,
df_counts = example_gene_counts,
sample_name = "test clustering",
fafile = NULL,
lib_type = "SE",
table_type = "STAR"
)
#browser()
gi$cluster_id = NULL
if (is.null(graphdf)){
message('Computing overlaps on-the-fly')
gi$idx_tmp = c(1:length(gi))
id_column = 'idx_tmp'
graphdf = compute_pair_overlap_df(gi,id_column = id_column,maxgap=maxgap,
minovl = minovl)
id_columns_grapdf = paste(id_column,c(1,2),sep = '.')
weight_column = 'weight'
graphdf = graphdf %>% dplyr::filter(
ratio.A >= min_arm_ratio,
ratio.B >= min_arm_ratio)
}else{
#message("Climeric duplex id column: ",id_column)
#message("Using connections dataframe with indexes: ",id_columns_grapdf[1],"-",id_columns_grapdf[2])
#message("Weights in: ",weight_column)
if (!(id_column %in% colnames(mcols(gi)))) {
stop(id_column ,"not found in provided GenomicInteractions onject")
}
}
id_column
graphdf
ddd = graphdf
View(ddd)
gi
View(ddd)
View(ddd)
dim(ddd)
#graphdf$weight = rescale(graphdf$ratio,to = c(0, 1))  # final weight is normalized
graphdf$weight = graphdf[weight_column] %>% pull
#graphdf$weight = rescale(graphdf$weight,to = c(0, 1))
graphdf$vert_id1 = graphdf[id_columns_grapdf[1]] %>% pull()
graphdf$vert_id2 = graphdf[id_columns_grapdf[2]] %>% pull()
graphdf = graphdf %>% dplyr::select(vert_id1,vert_id2,weight)
graph_vertices = unique(c(graphdf$vert_id1,graphdf$vert_id2 ))
any(is.na(graph_vertices))
graphdf
source("/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer/R/duplex_functions.R")
example_reads_star
res <- run_duplexdisco(
df = example_reads_star,
junctions_gr = example_splice_junc,
anno_gr = example_gene_anno,
df_counts = example_gene_counts,
sample_name = "test clustering",
fafile = NULL,
lib_type = "SE",
table_type = "STAR"
)
any(is.na(graph_vertices))
source("/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer/R/duplex_functions.R")
res <- run_duplexdisco(
df = example_reads_star,
junctions_gr = example_splice_junc,
anno_gr = example_gene_anno,
df_counts = example_gene_counts,
sample_name = "test clustering",
fafile = NULL,
lib_type = "SE",
table_type = "STAR"
)
gi
any(is.na(gi$duplex_id))
gi[id_column]
gi[id_column,]
mcols(gi)[id_column,]
mcols(gi)[id_column]
is.null(mcols(gi)[id_column])
any(is.na(mcols(gi)[id_column]))
stop("Undefined values in index field found before duplex clustering")
stop(paste0("Undefined values in index field found before duplex clustering. Index column used:",id_column,,collapse=''))
stop(paste0("Undefined values in index field found before duplex clustering. Index column used:",id_column,collapse=''))
res <- run_duplexdisco(
df = example_reads_star,
junctions_gr = example_splice_junc,
anno_gr = example_gene_anno,
df_counts = example_gene_counts,
sample_name = "test clustering",
fafile = NULL,
collapse_n_inter = 0,
lib_type = "SE",
table_type = "STAR"
)
gi_clusters <- res$gi_clusters
gi_clusters <- res$gi_clusters
gi_reads <- res$gi_reads
df_reads <- res$df_reads
n_reads_initial <- nrow(example_reads_star)
n_reads_clustered <- sum(gi_clusters$n_reads)
n_reads_unclustered <- df_reads %>%
dplyr::filter(is.na(cluster_id)) %>%
nrow()
n_reads_passed_to_clustering <- df_reads %>%
dplyr::filter(map_type == "2arm") %>%
nrow()
n_reads_passed_to_clustering_nodg <- df_reads %>%
dplyr::filter(is.na(cluster_id), map_type == "2arm") %>%
nrow()
n_clusters <- length(gi_clusters)
expect_equal(n_reads_clustered + n_reads_unclustered, n_reads_initial, label = "no reads lost overall")
expect_equal(n_reads_clustered + n_reads_passed_to_clustering_nodg, n_reads_passed_to_clustering, label = "no reads lost before clustering")
expect_equal(n_reads_clustered, 246, label = "correct number of reads clustered")
expect_equal(n_clusters, 70, label = "correct number of clusters found")
n_reads_clustered
devtools::load_all
devtools::load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
crop = NULL
)
# devtools::load_all('/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer')
library(DuplexDiscoverer)
# load example data
data(RNADuplexesSampleData)
result <- RunDuplexDiscoverer(
data = RNADuplexesRawChimSTAR,
junctions_gr = SampleSpliceJncGR,
anno_gr = SampleGeneAnnoGR,
df_counts = RNADuplexesGeneCounts,
sample_name = "example_run",
lib_type = "SE",
table_type = "STAR"
)
# load example data
data(RNADuplexesSampleData)
result <- RunDuplexDiscoverer(
data = RNADuplexesRawChimSTAR,
junctions_gr = SampleSpliceJncGR,
anno_gr = SampleGeneAnnoGR,
df_counts = RNADuplexesGeneCounts,
sample_name = "example_run",
lib_type = "SE",
table_type = "STAR"
)
roxygen2::roxygenise()
library(BiocStyle)
styler:::set_style_transformers()
devtools::load_all
devtools::load_all()
setwd("/data/meyer/egor/duplex_workflow/public/DuplexDiscoverer")
covr::report()
library(covr)
